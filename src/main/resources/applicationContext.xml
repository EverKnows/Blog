<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:redis="http://www.springframework.org/schema/redis"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/cache
                           http://www.springframework.org/schema/cache/spring-cache.xsd
                           http://www.springframework.org/schema/redis
                           http://www.springframework.org/schema/redis/spring-redis.xsd">


    <!-- 注解扫描 -->
    <context:component-scan base-package="FHQ.*"/>

    <!-- 加载数据源配置文件 -->
    <context:property-placeholder location="classpath:druid.properties" ignore-unresolvable="true"/>

    <!-- 配置数据源 -->
    <bean id="datasource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>
        <property name="url" value="${druid.url}"/>
        <property name="driverClassName" value="${druid.driver}"/>
    </bean>


    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="datasource"/>
        <property name="configLocation" value="classpath:sqlMapConfig.xml"/>
    </bean>

    <!-- Mapper扫描配置 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="FHQ.mapper"/>
    </bean>

    <!-- 配置事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"/>
    </bean>

    <!-- 声明式配置事务 -->
    <tx:advice id="txAdvicer" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置线程池 -->
    
    <bean id="threadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="20"></property>
        <property name="maxPoolSize" value="50"/>
        <property name="keepAliveSeconds" value="60"/>
        <property name="queueCapacity" value="80"/>
    </bean>

    <aop:aspectj-autoproxy/>

    <!-- redis -->


    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxActive}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>
        <!-- 配置连接池 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <property name="port" value="${redis.port}"/>
    </bean>

    <bean id="redisCacheConfig" class="FHQ.Redis.RedisCacheConfig">
        <constructor-arg name="mJedisConnectionFactory" ref="jedisConnectionFactory"/>
        <constructor-arg name="mRedisTemplate" ref="redisTemplate"/>
        <constructor-arg name="mRedisCacheManager" ref="redisCacheManager"/>

    </bean>

    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <property name="defaultExpiration" value="300"/>
        <constructor-arg name="redisOperations" ref="redisTemplate"/>
    </bean>

    <!--<bean id="keyGenerator" class="FHQ.Redis.KeyGenerator"/>-->

    <cache:annotation-driven cache-manager="redisCacheManager"/>

    <!-- 配置redis模板，进行操作 -->


    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!-- 由String.getBytes()实现 -->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>

        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>

        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>

        <!-- 开启事务 -->
        <property name="enableTransactionSupport" value="true"/>

    </bean>
</beans>